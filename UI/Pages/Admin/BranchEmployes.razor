@inject NavigationManager NavManager
@layout UserLayout
@page "/branchemployes/{Id:int}"
@attribute [Authorize(Roles = "Admin")]

<UserBanner H1="Lista pracowników w oddziale"></UserBanner>

<div class="container">

    <Items Parameters="@Parameters" EnableAdd="true" EnablePagination="true" EnableSearch="true" GoSearch="@GoSearch" PageSizeChange="@PageSizeChange" PageChange="@PageChange" AddNew="@AddEmployee">
        <Body>
            @if (Model.Any())
            {
                <table class="table text-center">
                    <thead>
                        <tr>
                            <th class="text-start">Email</th>
                            <th>Imię</th>
                            <th>Nazwisko</th>
                            <th>Administrator</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-start">@item.UserApp.Email</td>
                                <td>@item.UserApp.UserInfo.FirstName.ToUpper()</td>
                                <td>@item.UserApp.UserInfo.LastName.ToUpper()</td>
                                <td>@if (item.IsAdmin) { <span>TAK</span> } else { <span>NIE</span> }</td>
                                <td class="text-end">
                                    <button class="btn bg-c1 tx-c4" @onclick="@(e => RemoveEmployee(item.Id))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                            <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center p-5"><h2>@Message</h2></div>
            }
        </Body>
    </Items>
    <a href="/branches" class="btn bg-c3 form-rounded col-3 col-lg-2 col-xl-1 me-auto">Wróć</a>

</div>


@code {
    [Inject]
    public IBranchService branchService { get; set; }

    public List<GetBranchEmployesQueryVM> Model { get; set; } = new List<GetBranchEmployesQueryVM>();

    public string Message { get; set; } = string.Empty;

    public BasePagerFilter Parameters { get; set; } = new BasePagerFilter();

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task PageChange(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > Parameters.TotalPages)
        {
            return;
        }

        Parameters.Page = newPageNumber;
        await GetData();
    }

    public async Task PageSizeChange(int newPageSize)
    {
        Parameters.PageSize = newPageSize;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GoSearch(string newSearch)
    {
        Parameters.Search = newSearch;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GetData()
    {
        Message = "Ładowanie";
        Model.Clear();

        var response = await branchService.GetBranchEmployes(new GetBranchEmployesQuery()
            {
                Id = Id,
                Page = Parameters.Page,
                PageSize = Parameters.PageSize,
                Search = Parameters.Search
            });

        if (response.Success)
        {
            Model = response.Data.ToList();
            Parameters.UpdateTotalPages(response.DataCount);
        }
        else
        {
            Model.Clear();
            Parameters.UpdateTotalPages(0);
        }

        Message = response.Message;
    }

    public async Task AddEmployee()
    {
        NavManager.NavigateTo("/addemployestobranch/"+Id.ToString());
    }

    public async Task RemoveEmployee(int employeId)
    {
        var response = await branchService.RemoveEmployeeFromBranch(new RemoveEmployeeFromBranchCommand()
        {
                BranchId = Id,
                EmployeeId = employeId
        });

        if (response.Success)
        {
            await GetData();
        }
    }
}
