@inject NavigationManager NavManager
@layout UserLayout
@page "/models"
@attribute [Authorize(Roles = "Admin, Employee")]

<UserBanner H1="Lista modeli"></UserBanner>

<div class="container">

    <Items Parameters="@Parameters" EnableAdd="true" EnablePagination="true" EnableSearch="true" GoSearch="@GoSearch" PageSizeChange="@PageSizeChange" PageChange="@PageChange" AddNew="@AddModel">
        <Body>
            @if (Model.Any())
            {
                <table class="table text-center">
                    <thead>
                        <tr>
                            <th class="text-start">Marka</th>
                            <th class="">Model</th>
                            <th class="">Samochody</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="@(InputClassId == item.Id ? InputClass : "")">
                                <td class="text-start">
                                    <InputText class="form-control form-rounded listInput" @bind-Value="@item.BrandName" placeholder="Marka" @onfocusout="@(e => SaveModel(item.Id))"></InputText>
                                </td>
                                <td class="">
                                    <InputText class="form-control form-rounded listInput text-center" @bind-Value="@item.ModelName" placeholder="Model" @onfocusout="@(e => SaveModel(item.Id))"></InputText>
                                </td>
                                <td class="">@item.CarsCount</td>
                                <td class="text-end">
                                    @if (@item.CarsCount == 0)
                                    {
                                        <button class="btn bg-c1 tx-c4 mb-1" @onclick="@(e => DeleteModel(item.Id))">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z" />
                                            </svg>
                                        </button>
                                    }
                                    <a class="btn bg-c1 tx-c4 mb-1 ms-1" href="/carsbymodel/@item.Id">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-car-front-fill" viewBox="0 0 16 16">
                                            <path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679c.033.161.049.325.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.807.807 0 0 0 .381-.404l.792-1.848ZM3 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm10 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM6 8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2H6ZM2.906 5.189a.51.51 0 0 0 .497.731c.91-.073 3.35-.17 4.597-.17 1.247 0 3.688.097 4.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 11.691 3H4.309a.5.5 0 0 0-.447.276L2.906 5.19Z" />
                                        </svg>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center p-5"><h2>@Message</h2></div>
            }
        </Body>
    </Items>

</div>


@code {
    [Inject]
    public ICarModelService modelService { get; set; }

    public List<GetModelsListQueryVM> Model { get; set; } = new List<GetModelsListQueryVM>();

    public string Message { get; set; } = string.Empty;

    public string InputClass { get; set; } = string.Empty;
    public int InputClassId { get; set; }

    public BasePagerFilter Parameters { get; set; } = new BasePagerFilter();


    protected async override Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task PageChange(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > Parameters.TotalPages)
        {
            return;
        }

        Parameters.Page = newPageNumber;
        await GetData();
    }

    public async Task PageSizeChange(int newPageSize)
    {
        Parameters.PageSize = newPageSize;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GoSearch(string newSearch)
    {
        Parameters.Search = newSearch;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GetData()
    {
        Message = "Ładowanie";
        Model.Clear();

        var response = await modelService.GetModelsList(new GetModelsListQuery()
            {
                Page = Parameters.Page,
                PageSize = Parameters.PageSize,
                Search = Parameters.Search
            });

        if (response.Success)
        {
            Model = response.Data.ToList();
            Parameters.UpdateTotalPages(response.DataCount);
        }
        else
        {
            Model.Clear();
            Parameters.UpdateTotalPages(0);
        }

        Message = response.Message;
    }


    public async Task AddModel()
    {
        NavManager.NavigateTo("/addmodel");
    }

    public async Task DeleteModel(int modelId)
    {
        var response = await modelService.RemoveModel(new RemoveModelCommand() { Id = modelId });

        if (response.Success)
        {
            await GetData();
        }
    }

    public async Task SaveModel(int modelId)
    {
        var model = Model.FirstOrDefault(m => m.Id == modelId);

        var response = await modelService.EditModel(new EditModelCommand()
        {
            Id = model.Id,
            BrandName = model.BrandName,
            ModelName = model.ModelName
        });

        InputClass = response.Success ? "bg-success" : "bg-danger";
        InputClassId = modelId;
    }
}
