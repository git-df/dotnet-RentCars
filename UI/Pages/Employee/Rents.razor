@inject NavigationManager NavManager
@layout UserLayout
@page "/orders"
@attribute [Authorize(Roles = "Admin, Employee")]

<UserBanner H1="Moje zmówienia"></UserBanner>

<div class="container">

    <Items Parameters="@Parameters" EnablePagination="true" EnableSearch="true" GoSearch="@GoSearch" PageSizeChange="@PageSizeChange" PageChange="@PageChange">
        <Body>
            @if (Model.Any())
            {
                <table class="table text-center">
                    <thead>
                        <tr>
                            <th class="text-start">Nr</th>
                            <th class="">Email</th>
                            <th class="">Status</th>
                            <th class="">Status płatności</th>
                            <th class="">Od</th>
                            <th class="">Do</th>
                            <th class="">Cena</th>
                            <th class="">Samochód</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-start">@item.Id</td>
                                <td class="">@item.UserApp.Email</td>
                                <td class="">@item.Status.ToUpper()</td>
                                <td class="">@item.RentPayment.Status.ToUpper()</td>
                                <td class="">@item.DateFrom</td>
                                <td class="">@item.DateTo</td>
                                <td class="">@item.RentPayment.Price</td>
                                <td class="">@item.Car.CarsModel.BrandName @item.Car.CarsModel.ModelName</td>
                                <td class="text-end">
                                    @if (item.Status == "Nowe")
                                    {
                                        <button class="btn bg-c1 tx-c4 mb-1" @onclick="@(e => Confirm(item.Id))">Potwierdź</button>
                                        <button class="btn bg-c1 tx-c4 mb-1" @onclick="@(e => NoConfirm(item.Id))">Odrzuć</button>
                                    }
                                    @if (item.Status == "Zaakceptowane")
                                    {
                                        <button class="btn bg-c1 tx-c4 mb-1" @onclick="@(e => Done(item.Id))">Wykonaj</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center p-5"><h2>@Message</h2></div>
            }
        </Body>
    </Items>

</div>


@code {
    [Inject]
    public IRentService rentService { get; set; }

    public List<GetAllRentsQueryVM> Model { get; set; } = new List<GetAllRentsQueryVM>();

    public string Message { get; set; } = string.Empty;

    public BasePagerFilter Parameters { get; set; } = new BasePagerFilter();


    protected async override Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task PageChange(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > Parameters.TotalPages)
        {
            return;
        }

        Parameters.Page = newPageNumber;
        await GetData();
    }

    public async Task PageSizeChange(int newPageSize)
    {
        Parameters.PageSize = newPageSize;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GoSearch(string newSearch)
    {
        Parameters.Search = newSearch;
        Parameters.Page = 1;
        await GetData();
    }

    public async Task GetData()
    {
        Message = "Ładowanie";
        Model.Clear();

        var response = await rentService.GetAllRents(new GetAllRentsQuery()
            {
                Page = Parameters.Page,
                PageSize = Parameters.PageSize,
                Search = Parameters.Search
            });

        if (response.Success)
        {
            Model = response.Data.ToList();
            Parameters.UpdateTotalPages(response.DataCount);
        }
        else
        {
            Model.Clear();
            Parameters.UpdateTotalPages(0);
        }

        Message = response.Message;
    }

    public async Task Confirm(int rentId)
    {
        var response = await rentService.ConfirmRent(new ConfirmRentCommand() { RentId = rentId });

        if (response.Success)
        {
            await GetData();
        }
    }

    public async Task NoConfirm(int rentId)
    {
        var response = await rentService.NoConfirmRent(new NoConfirmRentCommand() { RentId = rentId });

        if (response.Success)
        {
            await GetData();
        }
    }

    public async Task Done(int rentId)
    {
        var response = await rentService.DoneRent(new DoneRentCommand() { RentId = rentId });

        if (response.Success)
        {
            await GetData();
        }
    }
}
